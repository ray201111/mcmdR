dlib(mcmd)
dlib(mcmd)
library(mcmd)
mcmd
mcmd.exec_command
?mcmd
mcmd.get_mcmd_path("/usr/tool/mcmd/bin/")
library(mcmd)
?mcmd
library(data.table)
.mcmd_path = "/usr/local/tool/mcmd/bin/"
mcmd.set_mcmd_path <- function(mcmd_path){ .mcmd_path <<- mcmd_path }
mcmd.get_mcmd_path <- function(){ return(.mcmd_path) }
.Mcmd.CreateDirIfNotExist <- function(dir_path){
if(!file.exists(dir_path)){
dir.create(dir_path, recursive = T, mode = "0777")
system(paste("chmod 777 ", dir_path))
Sys.sleep(1)
}
}
#******************************************************************************
#* 概要   | 指定したコマンドを実行                                            *
#* 詳細   |                                                                   *
#******************************************************************************
mcmd.exec_command <- function(string_command, out_file = ""){
# out_fileに入力があれば、ファイル出力モード
is_output_mode <- !(out_file == "")
# ファイル出力モードのときは、出力先フォルダを作成
if(is_output_mode){
.Mcmd.CreateDirIfNotExist(dirname(out_file))
}
# 実行するコマンド生成
if(is_output_mode){
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\"
",string_command, " > ", out_file)
}else{
# 改行を空白に置き換え
string_command <- gsub("\n", " ", string_command)
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\" ",string_command)
}
e <- try({
# ファイル出力モードの時はNULLを、そうでないときは結果を返す
if(is_output_mode){
res <- system(string_command)
return(res == 0)
}else{
result_data <- fread(string_command)
return(result_data)
}
})
if (class(e) == "try-error") {
return(F)
}
}
res <- Mcmd.ExecCommand("cat /fio/home/sasao_takafumi/csv/test.csv | msortf f=pf_id%r")
head(res)
mcmd.set_mcmd_path("/usr/tool/mcmd/bin/")
.mcmd_path = "/usr/local/tool/mcmd/bin/"
res <- Mcmd.ExecCommand("cat /fio/home/sasao_takafumi/csv/test.csv | msortf f=pf_id%r")
res <- mcmd.exec_command("cat /fio/home/sasao_takafumi/csv/test.csv | msortf f=pf_id%r")
head(res)
mcmd.exec_command <- function(string_command, out_file = ""){
# out_fileに入力があれば、ファイル出力モード
is_output_mode <- !(out_file == "")
# ファイル出力モードのときは、出力先フォルダを作成
if(is_output_mode){
.Mcmd.CreateDirIfNotExist(dirname(out_file))
}
string_command <- paste(string_command, sep=" ")
# 実行するコマンド生成
if(is_output_mode){
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\"
",string_command, " > ", out_file)
}else{
# 改行を空白に置き換え
#     string_command <- gsub("\n", " ", string_command)
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\" ",string_command)
}
e <- try({
# ファイル出力モードの時はNULLを、そうでないときは結果を返す
if(is_output_mode){
res <- system(string_command)
return(res == 0)
}else{
result_data <- fread(string_command)
return(result_data)
}
})
if (class(e) == "try-error") {
return(F)
}
}
mcmd.exec_command <- function(string_command, out_file = ""){
# out_fileに入力があれば、ファイル出力モード
is_output_mode <- !(out_file == "")
# ファイル出力モードのときは、出力先フォルダを作成
if(is_output_mode){
.Mcmd.CreateDirIfNotExist(dirname(out_file))
}
string_command <- paste(string_command, sep="", collaspe=" ")
# 実行するコマンド生成
if(is_output_mode){
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\"
",string_command, " > ", out_file)
}else{
# 改行を空白に置き換え
#     string_command <- gsub("\n", " ", string_command)
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\" ",string_command)
}
e <- try({
# ファイル出力モードの時はNULLを、そうでないときは結果を返す
if(is_output_mode){
res <- system(string_command)
return(res == 0)
}else{
result_data <- fread(string_command)
return(result_data)
}
})
if (class(e) == "try-error") {
return(F)
}
}
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"msortf f=pf_id%r"))
mcmd.exec_command <- function(string_command, out_file = ""){
# out_fileに入力があれば、ファイル出力モード
is_output_mode <- !(out_file == "")
# ファイル出力モードのときは、出力先フォルダを作成
if(is_output_mode){
.Mcmd.CreateDirIfNotExist(dirname(out_file))
}
string_command <- paste(string_command, sep="", collaspe=" ")
# 実行するコマンド生成
if(is_output_mode){
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\"
",string_command, " > ", out_file)
}else{
# 改行を空白に置き換え
#     string_command <- gsub("\n", " ", string_command)
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\" ",string_command)
print(string_command)
}
e <- try({
# ファイル出力モードの時はNULLを、そうでないときは結果を返す
if(is_output_mode){
res <- system(string_command)
return(res == 0)
}else{
result_data <- fread(string_command)
return(result_data)
}
})
if (class(e) == "try-error") {
return(F)
}
}
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"msortf f=pf_id%r"))
a<-c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"msortf f=pf_id%r")
a
paste(a, sep="", collaspe=" ")
paste(a,  collaspe=" ")
paste(a, sep="", collaspe="")
paste(a, sep="")
paste(a, sep="",collapse="")
paste(a, sep="",collapse=" ")
mcmd.exec_command <- function(string_command, out_file = ""){
# out_fileに入力があれば、ファイル出力モード
is_output_mode <- !(out_file == "")
# ファイル出力モードのときは、出力先フォルダを作成
if(is_output_mode){
.Mcmd.CreateDirIfNotExist(dirname(out_file))
}
string_command <- paste(string_command, sep="", collapse=" ")
# 実行するコマンド生成
if(is_output_mode){
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\"
",string_command, " > ", out_file)
}else{
# 改行を空白に置き換え
#     string_command <- gsub("\n", " ", string_command)
string_command <- paste0("PATH=\"$PATH:", .mcmd_path, "\" ",string_command)
print(string_command)
}
e <- try({
# ファイル出力モードの時はNULLを、そうでないときは結果を返す
if(is_output_mode){
res <- system(string_command)
return(res == 0)
}else{
result_data <- fread(string_command)
return(result_data)
}
})
if (class(e) == "try-error") {
return(F)
}
}
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv | msortf f=pf_id%r"))
head(res)
library(mcmd)
library(mcmd)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:A"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:A |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:A -sub |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:\n -sub |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:\\n -sub |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:a\\n -sub |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:a\n -sub |"
,"msortf f=pf_id%r"))
head(res)
source("/mnt/hadoop/main/analysis/data_solution/scripts/data_solution_library.R")
getHivePayment
dlib(DrecomHdfs)
dlib(DrecomUtil)
dlib(DrecomUserDB)
dlib(plyr)
dlib(reshape2)
dlib(ggplot2)
dlib(xtable)
dlib(DBI)
dlib(scales)
dlib(RMySQL, lib.loc="/usr/local/lib/R/site-library")
source("/mnt/hadoop/main/analysis/data_solution/scripts/data_solution_library.R")
Err.SetErrorReport("takafumi.sasao@drecom.co.jp", file="/mnt/gluster/script/onmyo/gree/Reports/hourly_payment/hourly_payment.R")
app<-"onmyo_gree"
dutil <- DrecomUtil$new()
target_datetime <- Date.GetAddHourToDateTime(Sys.time(), -1)
start_date <- as.Date(target_datetime)
end_date <- as.Date(target_datetime)
# ---------- 課金データ読み込み ----------
data_payment <- getHivePayment(app, start_date, end_date)
data_payment$hour <- substring(data_payment$date, 1, 13)
data_payment$date <- substring(data_payment$date, 1, 10)
Sys.time(), -1
Sys.time()
Date.GetAddHourToDateTime(Sys.time(), -1)
start_date <- as.Date(target_datetime)
end_date <- as.Date(target_datetime)
start_date
end_date
data_payment <- getHivePayment(app, start_date, end_date)
data_payment <- getHivePayment(app, "2014-09-16", "2014-09-16")
getHivePayment
data_payment <- getHivePayment(app, as.Date(start_date), as.Date(end_date))
library("EasyHTMLReport")
r_file_name = "/mnt/gluster/script/onmyo/gree/Reports/Raid_201409/event_main_report/Raid_event.Rmd"
pf <- "gree"
event_type <- "raid"
if(Sys.time() >= as.POSIXct("2014-09-09 17:00:00 JST") & Sys.time() < as.POSIXct("2014-09-18 02:00:00 JST")){
# easyHtmlReport(rmd.file="/home/sasao_takafumi/scripts/doll_deck_histgram.Rmd"
#                ,from="takafumi.sasao@drecom.co.jp",to="takafumi.sasao@drecom.co.jp;takafumi.sasao@drecom.co.jp",subject="test")
# easyHtmlReport(rmd.file="/home/sasao_takafumi/script/onmyo/gree/Raid_201406/event_main_report/Raid_event.Rmd"
#                ,from="takafumi.sasao@drecom.co.jp",to="takafumi.sasao@drecom.co.jp",subject="onmyo_6raid_main_gree")
# easyHtmlReport(rmd.file="/home/sasao_takafumi/script/onmyo/gree/Reports/Raid_201409/event_main_report/Raid_event.Rmd"
#                , from="takafumi.sasao@drecom.co.jp"
#                , to="ew2-zenki-report@devml.drecom.co.jp,ew2-analysis-report@devml.drecom.co.jp"
#                , subject=" onmyo_9raid_main_gree"
#                , err_mail_to = "ew2-analysis-report@devml.drecom.co.jp")
easyHtmlReport(rmd.file=paste0(r_file_name)
, from = "takafumi.sasao@drecom.co.jp"
, to = "ew2-zenki-report@devml.drecom.co.jp,ew2-analysis-report@devml.drecom.co.jp"
, subject = "onmyo_9raid_main_gree"
, err_mail_to = "ew2-analysis-report@devml.drecom.co.jp"
, remove_md = F)
require(knitr)
require(markdown)
markdownToHTML(paste0(r_file_name, ".tmp.Rmd.md")
, eval(paste("/mnt/gluster/default/html/onmyo/event_report/daily/", pf , "/"
, Sys.Date(), "_", substring(Sys.time(), 12, 13),"_", event_type, ".html", sep = "")))
}
start_date
end_date
app
start <- "2014-09-16"
end <- "2014-09-16"
hive.payment.dir <- expression(paste("/mnt/hadoop/main/hive/input/payment/region_month=",substr(target.days[i],1,7),"-01/","region_day=",target.days[i],"/app_key=",app,"/",sep=""))
# 時間を指定していない場合はstartが00:00:00、endが23:59:59
if(nchar(as.character(start))==10) start<-paste(start," 00:00:00",sep="")
if(nchar(as.character(end))==10) end<-paste(end," 23:59:59",sep="")
# startからendまでの日数配列作成
days<-as.Date(substr(end,1,10))-as.Date(substr(start,1,10))+1
target.days<-format(seq(as.Date(substr(start,1,10)),length.out=days,by="1 day"),"%Y-%m-%d")
# 処理日数分繰返し
payment<-data.frame()
target.days
source('~/.active-rstudio-document', echo=TRUE)
if(!file.exists(eval(hive.payment.dir))) next
i<-1
if(!file.exists(eval(hive.payment.dir))) next
# 課金ログファイル一覧取得
payment.file<-dir(eval(hive.payment.dir))
#payment.file<-payment.file[grep(paste0(target.days[i],".gz"),payment.file)]
# 課金ログファイル分繰返し
tmp.payment<-data.frame()
payment.file
j<-1
a<-read.csv(paste(eval(hive.payment.dir),payment.file[j],sep=""),head=F,sep="\t")
a<-a[,c("V1","V3","V40","V7")]
names(a)<-c("date","pf_id","payment","name")
tmp.payment<-rbind(tmp.payment,a)
payment<-rbind(payment,tmp.payment)
if(nrow(payment)==0) return(NULL)
/payment<-payment[payment$date>=start&payment$date<=end,]
nrow(payment)
/payment<-payment[payment$date>=start&payment$date<=end,]
payment<-payment[payment$date>=start&payment$date<=end,]
head(payment)
payment<-payment[payment$date>=start&payment$date<=end,]
head(payment)
payment.file<-dir(eval(hive.payment.dir))
tmp.payment<-data.frame()
a<-read.csv(paste(eval(hive.payment.dir),payment.file[j],sep=""),head=F,sep="\t")
a<-a[,c("V1","V3","V40","V7")]
names(a)<-c("date","pf_id","payment","name")
tmp.payment<-rbind(tmp.payment,a)
payment<-rbind(payment,tmp.payment)
head(payment)
payment.file<-dir(eval(hive.payment.dir))
tmp.payment<-data.frame()
a<-read.csv(paste(eval(hive.payment.dir),payment.file[j],sep=""),head=F,sep="\t")
head(a)
a<-a[,c("V1","V3","V40","V7")]
head(a)
names(a)<-c("date","pf_id","payment","name")
head(a)
tmp.payment<-rbind(tmp.payment,a)
head(tmp.payment)
payment<-data.frame()
payment<-rbind(payment,tmp.payment)
head(payment)
payment_t<-payment
payment<-payment[payment$date>=start&payment$date<=end,]
end
class(payment$date)
library(mcmd)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:a\n -sub |"
,"msortf f=pf_id%r"))
head(res)
res <- mcmd.exec_command(c("cat /fio/home/sasao_takafumi/csv/test.csv |"
,"mchgstr f=pf_id c=99:a -sub |"
,"msortf f=pf_id%r"))
head(res)
