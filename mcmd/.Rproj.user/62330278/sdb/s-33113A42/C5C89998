{
    "contents" : "function(app,start,end,ua=\"FALSE\"){\r\n  \r\n  start <- \"2014-09-16\"\r\n  end <- \"2014-09-16\"\r\n  \r\n  # hive payment ディレクトリ定義\r\n  hive.payment.dir <- expression(paste(\"/mnt/hadoop/main/hive/input/payment/region_month=\",substr(target.days[i],1,7),\"-01/\",\"region_day=\",target.days[i],\"/app_key=\",app,\"/\",sep=\"\"))\r\n  \r\n  # 時間を指定していない場合はstartが00:00:00、endが23:59:59\r\n  if(nchar(as.character(start))==10) start<-paste(start,\" 00:00:00\",sep=\"\")\r\n  if(nchar(as.character(end))==10) end<-paste(end,\" 23:59:59\",sep=\"\")\r\n  \r\n  # startからendまでの日数配列作成\r\n  days<-as.Date(substr(end,1,10))-as.Date(substr(start,1,10))+1\r\n  target.days<-format(seq(as.Date(substr(start,1,10)),length.out=days,by=\"1 day\"),\"%Y-%m-%d\")\r\n  i<-1\r\n  # 処理日数分繰返し\t\r\n  payment<-data.frame()\r\n  for(i in 1:length(target.days)){\r\n    \r\n    # 処理対象日の課金ディレクトリがない場合は skip\r\n    if(!file.exists(eval(hive.payment.dir))) next\r\n    \r\n    # 課金ログファイル一覧取得\r\n    payment.file<-dir(eval(hive.payment.dir))\r\n    #payment.file<-payment.file[grep(paste0(target.days[i],\".gz\"),payment.file)]\r\n    \r\n    # 課金ログファイル分繰返し\r\n    tmp.payment<-data.frame()\r\n    for(j in 1:length(payment.file)){\r\n      j<-1\r\n      # 課金ログファイル読込\r\n      a<-read.csv(paste(eval(hive.payment.dir),payment.file[j],sep=\"\"),head=F,sep=\"\\t\")\r\n      head(a)\r\n      # UserAgent不要の場合\r\n      if(ua==\"FALSE\"){\r\n        \r\n        a<-a[,c(\"V1\",\"V3\",\"V40\",\"V7\")]\r\n        names(a)<-c(\"date\",\"pf_id\",\"payment\",\"name\")\r\n        \r\n        # UserAgent必要な場合\r\n      }else{\r\n        \r\n        a<-a[,c(\"V1\",\"V3\",\"V40\",\"V7\",\"V17\")]\r\n        names(a)<-c(\"date\",\"pf_id\",\"payment\",\"name\",\"ua\")\r\n        \r\n      }\r\n      \r\n      # ファイル連結\r\n      tmp.payment<-rbind(tmp.payment,a)\r\n      head(tmp.payment)\r\n    }\r\n    \r\n    # ファイル連結\r\n    payment<-rbind(payment,tmp.payment)\r\n    head(payment)\r\n  }\r\n  \r\n  # 課金ファイルがない場合 NULL返却で終了\r\n  if(nrow(payment)==0) return(NULL)\r\n  \r\n  # 処理対象期間に絞込\r\n  head(payment)\r\n#   payment_t<-payment\r\n  payment<-payment[payment$date>=start&payment$date<=end,]\r\nclass(payment$date)\r\n  \r\n  # 課金種別設定\r\n  payment$type<-ifelse(is.na(str_match(payment$name,gacha.keyword)),\"item\",\"gacha\")\r\n  payment$pf_id <- as.character(payment$pf_id)\r\n  \r\n  # Nativeアプリ以外\r\n  if(app!=\"drif_native\" & app!=\"taro_native\"){\r\n    \r\n    # UserMap取得\r\n    user.map<-getUserMap(app)\r\n    \r\n    # user_id連結\r\n    payment<-merge(payment,user.map,by=\"pf_id\")\r\n    if(nrow(payment) == 0) return(NULL)  \r\n    \r\n    # UserAgent不要の場合\r\n    if(ua==\"FALSE\") payment <- payment[,c(\"date\",\"pf_id\",\"user_id\",\"install\",\"name\",\"type\",\"payment\")]\r\n    \r\n    # UserAgent必要な場合\r\n    if(ua==\"TRUE\") payment <- payment[,c(\"date\",\"pf_id\",\"user_id\",\"ua\",\"install\",\"name\",\"type\",\"payment\")]\r\n    \r\n    # Nativeアプリの場合\r\n  }else{\r\n    \r\n    # UserAgent不要の場合\r\n    if(ua==\"FALSE\"){\r\n      \r\n      payment<-payment[,c(\"date\",\"pf_id\",\"name\",\"type\",\"payment\")]\r\n      names(payment)[2]<-\"user_id\"\r\n      \r\n      # UserAgent必要な場合\r\n    }else{\r\n      \r\n      payment<-payment[,c(\"date\",\"pf_id\",\"ua\",\"name\",\"type\",\"payment\")]\r\n      names(payment)[2]<-\"user_id\"\r\n      \r\n    }\r\n    \r\n  }\r\n  \r\n  # 結果返却\r\n  return(payment)\r\n  \r\n}",
    "created" : 1410917595331.000,
    "dirty" : true,
    "encoding" : "",
    "folds" : "",
    "hash" : "40212772",
    "id" : "C5C89998",
    "lastKnownWriteTime" : 1056849717870620,
    "path" : null,
    "project_path" : null,
    "properties" : {
        "tempName" : "Untitled3"
    },
    "source_on_save" : false,
    "type" : "r_source"
}